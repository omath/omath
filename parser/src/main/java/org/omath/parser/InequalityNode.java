/* Generated By:JJTree: Do not edit this line. ASTFullForm.java */


package org.omath.parser;

import java.util.ArrayList;
import java.util.List;

 class InequalityNode extends FullFormNode {

	public InequalityNode(SyntaxParserImpl p, int id) {
	  super(p, id);
  }

  public InequalityNode(int id) {
	  super(id);
  }

@Override
public void jjtClose() {

	List<Node> ops = new ArrayList<Node>();
	boolean allSame=true;
	//find the operators between the terms
	for(int i=1;i<children.size();i+=2){
		ops.add(children.get(i));	
	}	
	Node firstOp= ops.get(0);
	
	if(!(firstOp instanceof RawNode) )
		throw new Error("Something strange, first OP is not a Raw Node! --" + firstOp.toString() );
	String name = ((RawNode)firstOp).getValue();
	
	//check if they are all the same
	for(Node node : ops ){
		if(!(firstOp instanceof RawNode) )
			throw new Error("Something strange,  OP is not a Raw Node! --" + node.toString() );
		if(!((RawNode)node).getValue().equals(name )){
			allSame = false;
			break;
		}
		
	}
	
	//if the are, that is the new head, remove the ops
	if(allSame){
		children.removeAll(ops);
		setHead(name);
	//if not, the head is "Inequality" and keep the ops
	}else{
		setHead("Inequality");
	}

	super.jjtClose();
}
  
  
  
  
}
