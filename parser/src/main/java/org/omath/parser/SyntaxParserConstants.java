/* Generated By:JJTree&JavaCC: Do not edit this line. SyntaxParserConstants.java */
package org.omath.parser;

public interface SyntaxParserConstants {

  int EOF = 0;
  int WHITESPACE = 1;
  int STRING_LITERAL = 7;
  int ImaginaryI = 11;
  int Alpha = 12;
  int Beta = 13;
  int Gamma = 14;
  int Delta = 15;
  int Epsilon = 16;
  int CurlyEpsilon = 17;
  int Zeta = 18;
  int Eta = 19;
  int Theta = 20;
  int CurlyTheta = 21;
  int Iota = 22;
  int Kappa = 23;
  int CurlyKappa = 24;
  int Lambda = 25;
  int Mu = 26;
  int Nu = 27;
  int Xi = 28;
  int Omicron = 29;
  int Pi = 30;
  int CurlyPi = 31;
  int Rho = 32;
  int CurlyRho = 33;
  int Sigma = 34;
  int FinalSigma = 35;
  int Tau = 36;
  int Upsilon = 37;
  int Phi = 38;
  int CurlyPhi = 39;
  int Chi = 40;
  int Psi = 41;
  int Omega = 42;
  int Digamma = 43;
  int Koppa = 44;
  int Stigma = 45;
  int Sampi = 46;
  int CapitalAlpha = 47;
  int CapitalBeta = 48;
  int CapitalGamma = 49;
  int CapitalDelta = 50;
  int CapitalEpsilon = 51;
  int CapitalZeta = 52;
  int CapitalEta = 53;
  int CapitalTheta = 54;
  int CapitalIota = 55;
  int CapitalKappa = 56;
  int CapitalLambda = 57;
  int CapitalMu = 58;
  int CapitalNu = 59;
  int CapitalXi = 60;
  int CapitalOmicron = 61;
  int CapitalPi = 62;
  int CapitalRho = 63;
  int CapitalSigma = 64;
  int CapitalTau = 65;
  int CapitalUpsilon = 66;
  int CurlyCapitalUpsilon = 67;
  int CapitalPhi = 68;
  int CapitalChi = 69;
  int CapitalPsi = 70;
  int CapitalOmega = 71;
  int CapitalDigamma = 72;
  int CapitalKoppa = 73;
  int CapitalStigma = 74;
  int CapitalSampi = 75;
  int SPECIALCHAR = 76;
  int FALSE = 77;
  int PERIOD = 78;
  int EOL = 79;
  int DIGIT = 80;
  int NONNEGATIVEINTEGER = 81;
  int LETTER = 82;
  int GENLETTER = 83;
  int ALPHANUMERIC = 84;
  int SYMBOL = 85;
  int LBRACKET = 86;
  int RBRACKET = 87;
  int TwoLBRACKETS = 88;
  int LPAREN = 89;
  int RPAREN = 90;
  int LBRACE = 91;
  int RBRACE = 92;
  int COMMA = 93;
  int BLANK = 94;
  int BLANKSEQUENCE = 95;
  int BLANKNULLSEQUENCE = 96;
  int HASH = 97;
  int HASHHASH = 98;
  int PERCENT = 99;
  int QUESTIONMARK = 100;
  int QUESTIONMARK2 = 101;
  int Factorial2 = 102;
  int Apply = 103;
  int GreaterEqual = 104;
  int StringExpression = 105;
  int RepeatedNull = 106;
  int StringJoin = 107;
  int Or = 108;
  int LessEqual = 109;
  int Map = 110;
  int SetDelayed = 111;
  int RuleDelayed = 112;
  int DeepApply = 113;
  int MessageName = 114;
  int Unequal = 115;
  int Not = 116;
  int SameQ = 117;
  int UpSet = 118;
  int Repeated = 119;
  int Function = 120;
  int Colon = 121;
  int PLUS = 122;
  int TIMES = 123;
  int MINUS = 124;
  int DIVIDE = 125;
  int CirclePlus = 126;
  int CompoundExpression = 127;
  int Optional = 128;
  int Set = 129;
  int Less = 130;
  int Greater = 131;
  int TimesBy = 132;
  int ReplaceRepeated = 133;
  int Equal = 134;
  int And = 135;
  int At = 136;
  int Unset = 137;
  int UpSetDelayed = 138;
  int Power = 139;
  int SlashSlash = 140;
  int ReplaceAll = 141;
  int ApplyAll = 142;
  int PreDecrement = 143;
  int UnsameQ = 144;
  int PreIncrement = 145;
  int DivideBy = 146;
  int Condition = 147;
  int Tag = 148;
  int SubtractFrom = 149;
  int Rule = 150;
  int Alternatives = 151;
  int AddTo = 152;
  int Tilde = 153;

  int DEFAULT = 0;
  int IN_COMMENT = 1;
  int IN_STRING_LITERAL = 2;

  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "\"(*\"",
    "\"*)\"",
    "\"(*\"",
    "<token of kind 5>",
    "\"\\\"\"",
    "\"\\\"\"",
    "\"\\\\\\\"\"",
    "\"\\\\\\\\\"",
    "<token of kind 10>",
    "\"\\\\[ImaginaryI]\"",
    "\"\\\\[Alpha]\"",
    "\"\\\\[Beta]\"",
    "\"\\\\[Gamma]\"",
    "\"\\\\[Delta]\"",
    "\"\\\\[Epsilon]\"",
    "\"\\\\[CurlyEpsilon]\"",
    "\"\\\\[Zeta]\"",
    "\"\\\\[Eta]\"",
    "\"\\\\[Theta]\"",
    "\"\\\\[CurlyTheta]\"",
    "\"\\\\[Iota]\"",
    "\"\\\\[Kappa]\"",
    "\"\\\\[CurlyKappa]\"",
    "\"\\\\[Lambda]\"",
    "\"\\\\[Mu]\"",
    "\"\\\\[Nu]\"",
    "\"\\\\[Xi]\"",
    "\"\\\\[Omicron]\"",
    "\"\\\\[Pi]\"",
    "\"\\\\[CurlyPi]\"",
    "\"\\\\[Rho]\"",
    "\"\\\\[CurlyRho]\"",
    "\"\\\\[Sigma]\"",
    "\"\\\\[FinalSigma]\"",
    "\"\\\\[Tau]\"",
    "\"\\\\[Upsilon]\"",
    "\"\\\\[Phi]\"",
    "\"\\\\[CurlyPhi]\"",
    "\"\\\\[Chi]\"",
    "\"\\\\[Psi]\"",
    "\"\\\\[Omega]\"",
    "\"\\\\[Digamma]\"",
    "\"\\\\[Koppa]\"",
    "\"\\\\[Stigma]\"",
    "\"\\\\[Sampi]\"",
    "\"\\\\[CapitalAlpha]\"",
    "\"\\\\[CapitalBeta]\"",
    "\"\\\\[CapitalGamma]\"",
    "\"\\\\[CapitalDelta]\"",
    "\"\\\\[CapitalEpsilon]\"",
    "\"\\\\[CapitalZeta]\"",
    "\"\\\\[CapitalEta]\"",
    "\"\\\\[CapitalTheta]\"",
    "\"\\\\[CapitalIota]\"",
    "\"\\\\[CapitalKappa]\"",
    "\"\\\\[CapitalLambda]\"",
    "\"\\\\[CapitalMu]\"",
    "\"\\\\[CapitalNu]\"",
    "\"\\\\[CapitalXi]\"",
    "\"\\\\[CapitalOmicron]\"",
    "\"\\\\[CapitalPi]\"",
    "\"\\\\[CapitalRho]\"",
    "\"\\\\[CapitalSigma]\"",
    "\"\\\\[CapitalTau]\"",
    "\"\\\\[CapitalUpsilon]\"",
    "\"\\\\[CurlyCapitalUpsilon]\"",
    "\"\\\\[CapitalPhi]\"",
    "\"\\\\[CapitalChi]\"",
    "\"\\\\[CapitalPsi]\"",
    "\"\\\\[CapitalOmega]\"",
    "\"\\\\[CapitalDigamma]\"",
    "\"\\\\[CapitalKoppa]\"",
    "\"\\\\[CapitalStigma]\"",
    "\"\\\\[CapitalSampi]\"",
    "<SPECIALCHAR>",
    "<FALSE>",
    "\".\"",
    "<EOL>",
    "<DIGIT>",
    "<NONNEGATIVEINTEGER>",
    "<LETTER>",
    "<GENLETTER>",
    "<ALPHANUMERIC>",
    "<SYMBOL>",
    "\"[\"",
    "\"]\"",
    "\"[[\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\"_\"",
    "\"__\"",
    "\"___\"",
    "\"#\"",
    "\"##\"",
    "\"%\"",
    "\"?\"",
    "\"??\"",
    "\"!!\"",
    "\"@@\"",
    "\">=\"",
    "\"~~\"",
    "\"...\"",
    "\"<>\"",
    "\"||\"",
    "\"<=\"",
    "\"/@\"",
    "\":=\"",
    "\":>\"",
    "\"@@@\"",
    "\"::\"",
    "\"!=\"",
    "\"!\"",
    "\"===\"",
    "\"^=\"",
    "\"..\"",
    "\"&\"",
    "\"\\\\[Colon]\"",
    "\"+\"",
    "\"*\"",
    "\"-\"",
    "\"/\"",
    "\"\\\\[CirclePlus]\"",
    "\";\"",
    "\":\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"*=\"",
    "\"//.\"",
    "\"==\"",
    "\"&&\"",
    "\"@\"",
    "\"=.\"",
    "\"^:=\"",
    "\"^\"",
    "\"//\"",
    "\"/.\"",
    "\"//@\"",
    "\"--\"",
    "\"=!=\"",
    "\"++\"",
    "\"/=\"",
    "\"/;\"",
    "\"/:\"",
    "\"-=\"",
    "\"->\"",
    "\"|\"",
    "\"+=\"",
    "\"~\"",
  };

}
